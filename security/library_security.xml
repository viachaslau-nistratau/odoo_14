<?xml version="1.0" ?>
<odoo>
    <record id="module_library_category" model="ir.module.category">
        <field name="name">Library</field>
    </record>
    <!-- Library User Group -->
    <record id="library_group_user" model="res.groups">
		<field name="name">User</field>
		<field name="category_id" ref="module_library_category"/>
		<field name="implied_ids" eval="[(4, ref('base.group_user'))]"/>
    </record>
    <!-- Library Manager Group -->
    <record id="library_group_manager" model="res.groups">
		<field name="name">Manager</field>
		<field name="category_id" ref="module_library_category"/>
		<field name="implied_ids" eval="[(4, ref('library_group_user'))]"/>
		<field name="users" eval="[(4, ref('base.user_root')), (4, ref('base.user_admin'))]"/>
    </record>
<!--    Правила записи - определение фильтров, ограничивающих,-->
<!--    к каким конкретным записям группа безопасности может получить доступ-->
<!--    Правило записи находится внутри элемента <data noupdate = "1">, что означает, -->
<!--    что эти записи будет создан при установке модуля, но не будет переписан при -->
<!--    обновлении модуля. Дело в том, чтобы позволяют настраивать эти правила позже -->
<!--    без риска того, что эти настройки будут потеряны при обновлении модуля. -->
<!--        Во время разработки noupdate = "1" может мешать, поскольку, если нужно -->
<!--    исправьте свое правило, обновление модуля не приведет к перезаписи данных -->
<!--    в базе данных. Из-за этого вы можете временно установить noupdate = "0" во -->
<!--    время разработки, пока вы не будете довольны файлом данных. -->
<!--        Атрибут eval оценивает его содержимое, как если бы это был код Python. -->
<!--    Это позволяет определять значения, которые не являются строками.-->
<!--    Обычно содержимое внутри тегов <field> всегда оценивается как строки.-->
<!--        ref атрибут - атрибут ref позволяет заполнить отношения между записями:-->
<!--    <field name = "company_id" ref = "main_company" />-->
<!--    Поле «company_id »- это отношение« многие к одному »от объекта пользователя -->
<!--    к объекту компании, а main_company - это идентификатор, с которым нужно связать.-->
<!--    В xml с использованием атрибута eval и ref для присвоения значения полю -->
<!--    и создания новой основной записи: - -->
<!--        Есть специальное выражение. Это отношение "один ко многим" поле и имеет -->
<!--    специальный синтаксис для работы. В этом случае кортеж (4, x) указывает, -->
<!--    что x должны быть добавлены к записям, и здесь x - это ссылка на внутреннюю -->
<!--    группу пользователей, идентифицируется base.group_user. Этот специальный -->
<!--    синтаксис для записи слишком большого количества полей-->
    <data noupdate="1">
		<record id="book_user_rule" model="ir.rule">
			<field name="name">Library Book User Access</field>
			<field name="model_id" ref="model_library_book"/>
			<field name="domain_force">[('active','=',True)]
			</field>
			<field name="groups" eval="[(4,ref('library_group_user'))]"/>
		</record>
    </data>
</odoo>