from odoo import http
from odoo.addons.library_app.controllers.main import Books

# расширим конечную точку / library / books для поддержки параметра строки
# запроса, available = 1, фильтруя каталог книги только по доступным названиям.
# Чтобы расширить существующий контроллер, нам нужно импортировать
# соответствующий объект, а затем реализовать метод с дополнительной логикой.


class BooksExtended(Books):
    """
    проверка доступности книги в библиотеке
    """
    @http.route()
    def list(self, **kwargs):
        response = super().list(**kwargs)
        if kwargs.get('available'):
            book = http.request.env['library.book']
            books = book.search([('is_available', '=', True)])
            response.qcontext['books'] = books
        return response


# Контроллер для расширения Books, был определен в library_app / controllers
# / main.py файл. Поэтому мы будем импортировать его из
# odoo.addons.library_app.controllers.main. Это отличается от моделей, где мы
# используем центральный реестр, доступный через объект env, для ссылки на
# любую модель класса, не зная, в каком конкретном файле он реализован.
# С контроллерами у нас нет этого, и нам нужно знать модуль и файл, реализующий
# расширяемый контроллер. Затем мы объявляем класс BooksExtended на основе
# исходного класса Books. Идентификатор имени, используемый для этого класса,
# не имеет значения. Мы просто используем его для наследования и расширения
# методов определенных в исходном классе. Затем мы (пере) определяем
# расширяемый
# метод контроллера, list (). Его нужно украсить по крайней мере простым
# @http.route(), чтобы его маршрут оставался активным. Если так использовать,
# без аргументов, он сохранит маршруты, определенные родительским классом.
# Но мы могли бы также добавить параметры этого декоратора @ http.route (),
# чтобы мы могли переопределить и заменить класс маршрутов.
# В расширенном методе hello () мы начинаем с использования super () для
# запуска существующего кода. Этот возвращает объект Response, полученный в
# результате этой обработки. Ответ имеет атрибуты с шаблоном для рендеринга
# template и контекст, используемый при рендеринге, qcontext.
# Но HTML еще предстоит сгенерировать. Это произойдет только тогда, когда
# контроллер закончит выполнение Это дает нам возможность изменить атрибуты
# ответа до того как финальный рендеринг будет сделан.
# Метод list () имеет аргумент ** kwargs, захватывающий все параметры, заданные
# в словаре kwargs. Это параметры, указанные в URL-адресе, например
# ?Available = 1. Метод проверяет kwargs на наличие available ключа со
# значением, и если да, изменяет qcontext, чтобы иметь набор записей
# только с доступными книгами.
